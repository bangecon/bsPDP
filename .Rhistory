plot(grid, marginHat.test)
plot(grid, marginHat.test, type = 'l')
##' Bootstrapped partial dependence plots for \code{randomForest}
##'
##' Evaluates a \code{randomForest} model for \code{n_boot} bootstrap iterations to obtain confidence bands for the estimated PDP.
##'
##' @param formula is an output formula for the outcome.
##' @param variable is the treatment variable.
##' @param data is a data frame to be used for the training.
##' @param newdata is an optional data frame of test data for the PDPs.
##' @param grid sets the values of \code{variable} to evaluate (default is 100 values in range of \code{variable}: \code{grid = seq(min(x), max(x), length.out = 100}).
##' @param outcome is the outcome class to be predicted for classification problems.
##' @param n_boot is the number of bootstrap replications.
##' @param p_boot is the proportion of the data to select for each bootstrap replication.
##' @param N is the number of observations to select for calculating the PDPs.
##' @param method indicates the type of model (randomForest).
##' @param label is a character-string variable label for \code{variable}.
##' @param clock is a logical indicating whether to time each bootstrap replication.
##' @param test is a logical indicating whether to calculate the pdp for both the \code{data} and \code{newdata}.
##' @param seed is a random seed (default is 8675309).
##' @param parallel indicates whether to run the random forest algorithm in parallel (default = \code{TRUE}).
##' @param ... additional arguments for \code{randomForest} function.
##' @return \code{bsPDPrf} returns an object with class "bsPDP," a list that includes the following components:
##' \item{variable}{the treatment variable.}
##' \item{pdpData}{the estimated average predictions and standard errors along \code{variable}.}
##' \item{marginData}{the estimated average marginal effects and standard errors along \code{variable}.}
##' \item{trainData}{the original training data.}
##' \item{testData}{the test data.}
##' \item{outcome}{the outcome class (\code{NULL} for outcomes with \code{numeric} class).}
##' \item{trControl}{is not applicable for this method (\code{NULL}).}
##' \item{method}{the method (\code{BayesTree})}
##' @export
bsPDP.randomForest <-
function(formula,
variable = NULL,
data,
newdata = NULL,
grid = NULL,
outcome = NULL,
n_boot = 100,
p_boot = 0.6,
N = 1000,
label = NULL,
clock = FALSE,
test = FALSE,
seed = 8675309,
parallel = TRUE,
n_tree = 500,
...) {
set.seed(seed)
data <- model.frame(formula, data)
x <- data[, which(names(data) %in% variable)]
unregister <- function() {
env <- foreach:::.foreachGlobals
rm(list = ls(name = env), pos = env)
}
if (is.null(newdata)) {
newdata <- data
}
if (is.null(grid)) {
grid = seq(min(na.omit(x)), max(na.omit(x)), length.out = 100)
}
if (is.null(label)) {
label = variable
}
if (is.null(outcome) & is.factor(data[, 1])) {
if (length(levels(data[, 1])) == 2) {
outcome = levels(data[, 1])[2]
} else {
outcome = levels(data[, 1])[1]
}
}
model <- NULL
pdps  <- as.matrix(grid)
pdps.test  <- as.matrix(grid)
if (clock == TRUE) {
cat(paste0(
"Began bootstrap replications at ",
noquote(strftime(Sys.time(), "%H:%M:%S")),
". \n"
))
}
for (i in 1:n_boot) {
df <-
data[sample(nrow(data), size = ceiling(p_boot * nrow(data))),]
if (parallel == TRUE) {
no_cores <- parallel::detectCores() - 1
cl <- parallel::makePSOCKcluster(no_cores, outfile = '')
doParallel::registerDoParallel(cl, no_cores)
parallel::clusterEvalQ(cl, library(doParallel))
parallel::clusterExport(cl, varlist = 'df')
model <-
foreach::foreach(
ntree = rep(ceiling(n_tree / 5), 5),
.combine = randomForest::combine,
.multicombine = TRUE,
.packages = 'randomForest'
) %dorng% {
randomForest::randomForest(
x = data[, -1],
y = data[, 1],
data = df,
keep.forest = TRUE,
ntree = ntree,
...
)
}
unregister()
closeAllConnections()
} else {
model <-
randomForest(
x = data[, -1],
y = data[, 1],
data = df,
keep.forest = TRUE,
ntree = n_tree,
...
)
}
if (test == TRUE) {
newdf.test <-
newdata[sample(nrow(newdata), size = N, replace = TRUE),-which(names(newdata) %in% variable)]
xp.test <-
cbind(as.data.frame(grid %x% matrix(1, nrow(newdf.test))),
newdf.test[rep(seq_len(nrow(newdf.test)), length(grid)),])
colnames(xp.test)[1] <- variable
if (is.factor(data[, 1])) {
xp.test$yhat <-
predict(model, type = 'prob', newdata = xp.test)[, outcome]
} else {
xp.test$yhat <- predict(model, type = 'response', newdata = xp.test)
}
xp.test <-
cbind(xp.test[, variable], xp.test[, 'yhat'])
colnames(xp.test) <- c(variable, 'yhat')
pdps.test <-
cbind(pdps.test, aggregate(xp.test, list(xp.test[, 1]), mean)$yhat)
colnames(pdps.test)[1 + i] <- paste0('yhat', i)
rm(newdf.test, xp.test)
}
newdf <-
df[sample(nrow(df), size = N, replace = TRUE), -which(names(df) %in% variable)]
xp <-
cbind(as.data.frame(grid %x% matrix(1, nrow(newdf))),
newdf[rep(seq_len(nrow(newdf)), length(grid)),])
colnames(xp)[1] <- variable
if (is.factor(data[, 1])) {
xp$yhat <-
predict(model, type = 'prob', newdata = xp)[, outcome]
} else {
xp$yhat <-
predict(model, type = 'raw', newdata = xp)
}
xp <-
cbind(xp[, variable], xp[, 'yhat'])
colnames(xp) <- c(variable, 'yhat')
pdps <-
cbind(pdps, aggregate(xp, list(xp[, 1]), mean)$yhat)
colnames(pdps)[1 + i] <- paste0('yhat', i)
rm(df, newdf, xp, model)
if (clock == TRUE) {
cat(paste0(
"Completed replication ",
i,
" out of ",
n_boot,
" at ",
noquote(strftime(Sys.time(), "%H:%M:%S")),
". \n"
))
}
}
if (test == TRUE) {
for (i in 1:length(grid)) {
if (i == 1) {
margins.test <-
matrix(c(grid[i], rep(NA, n_boot)), nrow = 1, ncol = n_boot + 1)
}
if (i == length(grid)) {
margins.test <- rbind(margins.test, c(grid[i], rep(NA, n_boot)))
}
if (i < length(grid) & i > 1) {
margins.test <-
rbind(margins.test, c(grid[i],
(pdps.test[i + 1,] - pdps.test[i - 1,]) / (grid[i + 1] - grid[i - 1])))
}
}
pdpHat.test <-
matrixStats::rowMeans2(pdps.test[, 2:(1 + n_boot)])
pdpSd.test <- matrixStats::rowSds(pdps.test[, 2:(1 + n_boot)])
marginHat.test <-
matrixStats::rowMeans2(margins.test[, 3:n_boot])
marginSd.test <- matrixStats::rowSds(margins.test[, 3:n_boot])
} else {
pdpHat.test <- c(rep(NA, length(grid)))
pdpSd.test <- c(rep(NA, length(grid)))
marginHat.test <- c(rep(NA, length(grid)))
marginSd.test <- c(rep(NA, length(grid)))
}
pdps <- as.matrix(pdps)
for (i in 1:length(grid)) {
if (i == 1) {
margins <-
matrix(c(grid[i], rep(NA, n_boot)), nrow = 1, ncol = n_boot + 1)
}
if (i == length(grid)) {
margins <- rbind(margins, c(grid[i], rep(NA, n_boot)))
}
if (i < length(grid) & i > 1) {
margins <-
rbind(margins, c(grid[i],
(pdps[i + 1,] - pdps[i - 1,]) / (grid[i + 1] - grid[i - 1])))
}
}
pdpHat <- matrixStats::rowMeans2(pdps[, 2:(1 + n_boot)])
pdpSd <- matrixStats::rowSds(pdps[, 2:(1 + n_boot)])
marginHat <-
matrixStats::rowMeans2(margins[, 3:n_boot])
marginSd <- matrixStats::rowSds(margins[, 3:n_boot])
pdpData <- cbind(grid, pdpHat, pdpSd, pdpHat.test, pdpSd.test)
marginData <-
cbind(grid, marginHat, marginSd, marginHat.test, marginSd.test)
colnames(pdpData)[1] <- variable
out <- list(
trainData = data,
variable = variable,
pdpData = pdpData,
marginData = marginData,
testData = newdata,
outcome = c(names(data)[1], outcome),
trControl = NULL,
trainMethod = 'randomForest'
)
class(out) <- c('bsPDP', class(out))
return(out)
}
testes.1_2 <-
bsPDP.randomForest(
read30_01 ~ .,
data = READI_Model_LS[sample(nrow(READI_Model_LS), size = 10000), ],
newdata = READI_Model_TS[sample(nrow(READI_Model_TS), size = 10000), ],
test = TRUE,
nodesize = 6,
classwt = c(0.9999, 0.0001),
strata = "hosp",
variable = "MMunitrnothppd",
label = "Unit RN OT Hours per Patient Day",
clock = TRUE
)
summary(testes.1_2$marginData)
plot(testes.1_2$marginData$grid, marginData$marginHat)
plot(testes.1_2$marginData[,1], marginData[,2])
plot(testes.1_2$marginData[,1], marginData[,2], type = 'l')
plot(testes.1_2$pdpData[,1], pdpData[,2], type = 'l')
plot(testes.1_2$marginData[,1], testes.1_2$marginData[,2], type = 'l')
abline(h = 0)
##' Plot bootstrapped partial dependence plots
##'
##' Plots objects of class \code{bsPDP} created by bootstrapping a predictive or causal model to show confidence bands for the average predicted partial dependence plot of a variable.
##'
##' @details \code{bsPDP} and \code{plot.bsPDP} currently support the following methods:
##'
##' \code{lm} for linear models
##'
##' \code{glm} for generalized linear models
##'
##' \code{randomForest} for random forests
##'
##' \code{caret} for pramater tuning with machine-learning models (including tree ensembles and neural networks)
##'
##' \code{dbarts} and \code{BayesTree} for Bayesian Additive Regression Trees (BART)
##'
##' \code{causaldrf} for inverse probability-of-treatment weights estimators \code{iptw_est} and the Hirano-Imbens (2004) covariate balancing estimators \code{hi_est}.
##'
##' @param bsPDP (required) a list created by a \code{bsPDP} function and contains the following elements:
##' 1. \code{trainData}: a data frame containing the original training sample.
##' 2. \code{variable}: the x-variable from \code{trainData} to predict and plot.
##' 3. \code{pdpData}: data frame containing the following variables:
##'    a. \code{variable}: grid values of the x-variable;
##'    b. \code{pdpHat}: the average of the bootstrapped predictions at each grid value in the training sample;
##'    c. \code{pdpSd}: the standard errors of the bootstrapped predictions at each grid value in the training sample;
##'    d. \code{pdpHat.test}: the average of the bootstrapped predictions at each grid value in the test sample;
##'    e. \code{pdpSd.test}: the standard errors of the bootstrapped predictions at each grid in the test sample;
##' 4. \code{testData}: a data frame containing the test sample.
##' 5. \code{outcome}: the outcome class (for classification).
##' 6. \code{trControl}: the \code{trainControl} settings (for tuned \code{caret} methods).
##' 7. \code{trainMethod}: the \code{method} used in the \code{caret} functionl.
##' @param type is one of \code{"response"} or \code{"margins"} indicating whether to plot the predicted outcome (\code{"response"}, the default) or the approximate average marginal effect along \code{variable}
##' @param test is a logical indicating whether to plot the pdp for the test data instead of the train data (default is \code{FALSE}).
##' @param title is a string for the main title of the plot (the default is "Partial Dependence Plot").
##' @param xlim is a vector combination equal to the minimum and maximum values of the x-axis (the default is the minimum and maximum values of the x-variable).
##' @param ylim is a vector combination equal to the minimum and maximum values of the y-axis (the default is the minimum of \code{pdpHat} minus 3 times the maximum value of \code{pdpSd} and the maximum of pdpHat plus 3 times the maximum value of \code{pdpSd}).
##' @param xtitle is a character string for the x-axis title (the default is the name of the x-variable)
##' @param ytitle is a character string for the y-axis title (the default is "Predicted Outcome")
##' @param iqr is a logical indicating whether to include lines at the IQR bounds of x (the default is \code{FALSE})
##' @param hist is a logical indicating whether to include a histogram of x (the default is \code{FALSE})
##'
##' @return \code{plot.bsPDP} returns a \code{ggplot} that can bee manipulated according to \code{ggplot} syntax.
##'
##' @references Yakusheva, Olga; Bang, James T; Bobay, Kathleen; Hughes, Ronda G; Costa, Linda; and Weiss, Marianne (2021, Forthcoming). \emph{Health Services Research.}
##'
##' @export
##'
plot.bsPDP <-
function(bsPDP,
type = "response",
test = FALSE,
title = "Partial Dependence Plot",
xlim = NULL,
ylim = NULL,
xtitle = NULL,
ytitle = "Predicted Outcome",
iqr = FALSE,
hist = FALSE) {
# Set some plot parameters
trainData <- bsPDP$trainData
if (type == "response") {
data <- bsPDP$pdpData
if (test == TRUE) {
yhat <- 'pdpHat.test'
ysd  <- 'pdpSd.test'
} else {
yhat <- 'pdpHat'
ysd  <- 'pdpSd'
}
} else {
data <- bsPDP$marginData
if (test == TRUE) {
yhat <- 'marginHat.test'
ysd  <- 'marginSd.test'
} else {
yhat <- 'marginHat'
ysd  <- 'marginSd'
}
}
pdpData <- bsPDP$pdpData
if (is.null(xlim)) {
xlim <-
quantile(pdpData[, 1], probs = c(0, 1))
}
if (is.null(ylim)) {
ylim <-
c(min(data[, which(colnames(data) %in% yhat)]) - 3 *
max(data[, which(colnames(data) %in% ysd)]),
max(data[, which(colnames(data) %in% yhat)]) + 3 *
max(data[, which(colnames(data) %in% ysd)]))
}
if (hist == TRUE) {
ylim[1] = min(0, ylim[1])
}
if (is.null(xtitle)) {
xtitle <- names(pdpData)[1]
}
out <- ggplot() +
theme_bw() +
ggtitle(title) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(limits = xlim) +
scale_y_continuous(limits = ylim) +
labs(x = xtitle, y = ytitle)
# Plot the mean pdp from the bootstrap
out <- out +
geom_line(
aes(x = data[, 1],
y = data[, which(colnames(data) %in% yhat)]),
size = 0.7,
alpha = 1,
color = 'black'
) +
geom_ribbon(
aes(
x = data[, 1],
ymin = data[, which(colnames(data) %in% yhat)] +
qnorm(0.025) * data[, which(colnames(data) %in% ysd)],
ymax = data[, which(colnames(data) %in% yhat)] -
qnorm(0.025) * data[, which(colnames(data) %in% ysd)]
),
fill = 'red',
alpha = 0.1
)
# Add markers for the interquartile range of x
if (iqr == TRUE) {
range <-
quantile(trainData[, which(names(trainData) %in% colnames(data)[1])],
probs = c(0.25, 0.75))
out <- out +
geom_vline(xintercept = range[1],
linetype = 'dashed') +
geom_vline(xintercept = range[2],
linetype = 'dashed')
}
# Add histogram for the distribution of x
if (hist == TRUE) {
out <-
out + geom_histogram(
aes(x = trainData[, which(names(trainData) %in% colnames(data)[1])],
y = stat(count) / sum(count)),
color = 'black',
fill = 'black',
alpha = 0.1
)
}
return(out)
}
plot(testes.1_2, type = 'response', hist = TRUE, iqr = TRUE)
library(ggplot2)
plot(testes.1_2, type = 'response', hist = TRUE, iqr = TRUE)
plot(testes.1_2, type = 'margins', iqr = TRUE)
colnames(testes.1_2$marginData)
colnames(testes.1_2$pdpData)
colnames(testes.1_2$marginData)[1] <- "MMunitrnothppd"
plot(testes.1_2, type = 'margins', iqr = TRUE)
plot(testes.1_2, type = 'margins', iqr = TRUE, hist = TRUE)
setwd("G:/My Drive/Research - Health/Readmissions/READI/bsPDP")
devtools::document()
setwd("G:/My Drive/Research - Health/Readmissions/READI")
devtools::install("bsPDP")
library(bsPDP)
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D90 <- lm(weight ~ group - 1) # omitting intercept
library(glm)
counts <- c(18,17,15,20,10,20,25,13,12)
outcome <- gl(3,1,9)
treatment <- gl(3,3)
data.frame(treatment, outcome, counts) # showing data
glm.D93 <- glm(counts ~ outcome + treatment, family = poisson())
counts <- c(18,17,15,20,10,20,25,13,12)
outcome <- gl(3,1,9)
treatment <- gl(3,3)
data.frame(treatment, outcome, counts) # showing data -> df
glm.bsPDP <- bsPDP(counts ~ outcome + treatment, data = df, variable = 'treatment', method = 'glm', family = poisson())
counts <- c(18,17,15,20,10,20,25,13,12)
outcome <- gl(3,1,9)
treatment <- gl(3,3)
data.frame(treatment, outcome, counts)  -> df
glm.bsPDP <- bsPDP(counts ~ outcome + treatment, data = df, variable = 'treatment', method = 'glm', family = poisson())
lapply(df, class)
utils::data(anorexia, package = "MASS")
anorex.1 <- glm(Postwt ~ Prewt + Treat + offset(Prewt),
family = gaussian, data = anorexia)
summary(anorex.1)
summary(anorexia)
anorex.bsPDP <- bsPDP(Postwt ~ Prewt + Treat, family = gaussian, data = anorexia, method = 'glm')
anorex.bsPDP <- bsPDP(Postwt ~ Prewt + Treat, family = gaussian, data = anorexia, variable = 'Postwt', method = 'glm')
source('C:/Users/bange/Google Drive/Research - Health/Readmissions/READI/bsPDP/R/bsPDP_glm.R', echo=TRUE)
anorex.bsPDP <- bsPDP(Postwt ~ Prewt + Treat, family = gaussian, data = anorexia, variable = 'Postwt', method = 'glm')
setwd("C:/Users/bange/Google Drive/Research - Health/Readmissions/READI")
devtools::install(bsPDP)
devtools::install('bsPDP')
setwd("C:/Users/bange/Google Drive/Research - Health/Readmissions/READI")
devtools::install('bsPDP')
writeLines(strsplit(Sys.getenv("PATH"), ";")[[1]])
Sys.which("make")
library(installr)
updater()
install.packages(c("blob", "broom", "broom.mixed", "cli", "countrycode", "credentials", "curl", "DALEX", "e1071", "emmeans", "ergm", "fastmatch", "flextable", "gargle", "googledrive", "googlesheets4", "gtsummary", "isoband", "jpeg", "lwgeom", "matrixcalc", "matrixStats", "maxLik", "officer", "protolite", "ranger", "Rcpp", "RcppArmadillo", "readr", "renv", "rgl", "rpart.plot", "RPostgreSQL", "Rttf2pt1", "rvest", "sf", "stringi", "styler", "survey", "testthat", "tibble", "utf8", "wk"))
devtools::install('C:/Users/bange/Google Drive/Research - Health/Readmissions/READI/bsPDP')
file.path(R.home(), "bin/x64")
devtools::install('C:/Users/bange/Google Drive/Research - Health/Readmissions/READI/bsPDP')
devtools::install('C:/Users/bange/Google Drive/Research - Health/Readmissions/READI/bsPDP')
devtools::install('C:/Users/bange/Google Drive/Research - Health/Readmissions/READI/bsPDP')
.Last.error.trace
raster::mask:
chirpsz <- mask(x = chirps, mask = districts)
set.seed(1)
ind <- sample(1:nlayers(chirpsz), size = 3)
plot(chirpsz[[ind]], axes = FALSE, box = FALSE, nr = 1)
chirpsz <- raster::mask(x = chirps, mask = districts)
set.seed(1)
ind <- sample(1:nlayers(chirpsz), size = 3)
plot(chirpsz[[ind]], axes = FALSE, box = FALSE, nr = 1)
install.packages("raster")
chirpsz <- raster::mask(x = chirps, mask = districts)
set.seed(1)
ind <- sample(1:nlayers(chirpsz), size = 3)
plot(chirpsz[[ind]], axes = FALSE, box = FALSE, nr = 1)
library(raster)
data(chirps)
devtools::install(build_vignettes = TRUE)
Sys.getenv('PATH')
View(Sys.getenv('PATH'))
library(devtools)
find_rtools(T)
Sys.getenv('BINPREF')
Sys.setenv(BINPREF = )
Sys.setenv(BINPREF = 'C:\rtools40\usr\bin')
Sys.setenv(BINPREF = 'C:/rtools40/usr/bin')
Sys.getenv("BINPREF")
devtools::install('C:/Users/bange/Google Drive/Research - Health/Readmissions/READI/bsPDP')
library(doParallel); library(doRNG); library(ggplot2); library(randomForest); library(caret)
library(matrixStats)
setwd("C:/Users/jb0616165/Google Drive/Research - Health/Readmissions/READI/bsPDP/R")
source('C:/Users/jb0616165/Google Drive/Research - Health/Readmissions/READI/bsPDP/R/bsPDP_BayesTree.R')
source('C:/Users/jb0616165/Google Drive/Research - Health/Readmissions/READI/bsPDP/R/bsPDP_caret.R')
source('C:/Users/jb0616165/Google Drive/Research - Health/Readmissions/READI/bsPDP/R/bsPDP_dbarts.R')
source('C:/Users/jb0616165/Google Drive/Research - Health/Readmissions/READI/bsPDP/R/bsPDP_glm.R')
source('C:/Users/jb0616165/Google Drive/Research - Health/Readmissions/READI/bsPDP/R/bsPDP_hi_est.R')
source('C:/Users/jb0616165/Google Drive/Research - Health/Readmissions/READI/bsPDP/R/bsPDP_iptw_est.R')
source('C:/Users/jb0616165/Google Drive/Research - Health/Readmissions/READI/bsPDP/R/bsPDP_lm.R')
source('C:/Users/jb0616165/Google Drive/Research - Health/Readmissions/READI/bsPDP/R/bsPDP_randomForest.R')
source('C:/Users/jb0616165/Google Drive/Research - Health/Readmissions/READI/bsPDP/R/bsPDP.R')
source('C:/Users/jb0616165/Google Drive/Research - Health/Readmissions/READI/bsPDP/R/hi_est.R')
source('C:/Users/jb0616165/Google Drive/Research - Health/Readmissions/READI/bsPDP/R/iptw_est.R')
source('C:/Users/jb0616165/Google Drive/Research - Health/Readmissions/READI/bsPDP/R/plot_bsPDP.R')
source('C:/Users/jb0616165/Google Drive/Research - Health/Readmissions/READI/bsPDP/R/bsPDP_caret.R')
source('C:/Users/jb0616165/Google Drive/Research - Health/Readmissions/READI/bsPDP/R/bsPDP_caret.R')
source('C:/Users/jb0616165/Google Drive/Research - Health/Readmissions/READI/bsPDP/R/bsPDP_BayesTree.R')
